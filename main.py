import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

user_reports = {}
user_states = {}

# === –ö–ê–¢–ï–ì–û–†–Ü–á ===
categories = ["–ü–∏—Ä–æ–≥–∏", "–ü–∏—Ä—ñ–∂–∫–∏", "–ì–∞–ª–µ—Ç–∏", "–î–µ—Å–µ—Ä—Ç–∏"]

# === –ü–ò–†–û–ì–ò ===
pies = {
    "–ó –º º—è—Å–æ–º": {
        "üçóüçÖüßÄ": "–ö—É—Ä–∫–∞-—Ç–æ–º–∞—Ç–∏-—Å–∏—Ä",
        "üçóüççüßÄ": "–ö—É—Ä–∫–∞-–∞–Ω–∞–Ω–∞—Å-—Å–∏—Ä",
        "üçóüçÑüßÄ": "–ö—É—Ä–∫–∞-–≥—Ä–∏–±–∏-—Å–∏—Ä",
        "üêÑüßÄ": "–¢–µ–ª—è—Ç–∏–Ω–∞-—Å–∏—Ä",
        "ü¶Éü´ë": "–Ü–Ω–¥–∏–∫-—Å–æ–ª–æ–¥–∫–∏–π –ø–µ—Ä–µ—Ü—å"
    },
    "–ë–µ–∑ –º º—è—Å–∞": {
        "üßÖ": "–¶–∏–±—É–ª–µ–≤–∏–π",
        "üçÑüßÄ": "–ì—Ä–∏–±–∏-—Å–∏—Ä",
        "üßÄüçÉ": "–°–∏—Ä-—à–ø–∏–Ω–∞—Ç",
        "üßÄ": "–°—ñ–º —Å–∏—Ä—ñ–≤"
    },
    "–°–æ–ª–æ–¥–∫—ñ": {
        "üçíü´ê": "–í–∏—à–Ω—è-–ª–æ—Ö–∏–Ω–∞",
        "üçíüßÄ": "–í–∏—à–Ω—è-—Å–∏—Ä"
    }
}

# === –ü–ò–†–Ü–ñ–ö–ò ===
savory_pyrizhky = {
    "ü•î": "–ö–∞—Ä—Ç–æ–ø–ª—è",
    "ü•îüçÑ": "–ö–∞—Ä—Ç–æ–ø–ª—è-–≥—Ä–∏–±–∏",
    "üçÑ": "–ì—Ä–∏–±–∏",
    "ü•¨": "–ö–∞–ø—É—Å—Ç–∞",
    "ü•¨ü•©": "–ö–∞–ø—É—Å—Ç–∞-–º º—è—Å–æ",
    "ü•©ü•ó": "–ú º—è—Å–æ-–æ–≤–æ—á—ñ"
}

sweet_pyrizhky = {
    "üçí": "–í–∏—à–Ω—è",
    "üçíüç´": "–í–∏—à–Ω—è-—à–æ–∫–æ–ª–∞–¥",
    "üçíüåº": "–í–∏—à–Ω—è-–º–∞–∫",
    "üçê": "–ì—Ä—É—à–∞",
    "–°–ª–∏–≤–∞": "–°–ª–∏–≤–∞",
    "–ê–±—Ä–∏–∫–æ—Å": "–ê–±—Ä–∏–∫–æ—Å",
    "–í–∏—à–Ω—è-–∫—Ä–µ–º": "–í–∏—à–Ω—è-–∫—Ä–µ–º",
    "–ú–∞–∫-–∫—Ä–µ–º": "–ú–∞–∫-–∫—Ä–µ–º",
    "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è": "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è"
}

# === –ì–ê–õ–ï–¢–ò –Ü –î–ï–°–ï–†–¢–ò ===
galety = {"ü•ßüçè": "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è", "ü•ßüçÖ": "–¢–æ–º–∞—Ç–∏-—Å–∏—Ä"}
deserty = {"üç∞": "–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω", "üçØ": "–ü–∞—Ö–ª–∞–≤–∞", "ü•ú": "–ì–æ—Ä—ñ—à–∫–∏"}

# === –°–¢–ê–†–¢ / –ó–í–Ü–¢ ===
@bot.message_handler(commands=["start", "–∑–≤—ñ—Ç"])
def start_report(message):
    chat_id = message.chat.id
    user_reports[chat_id] = []
    user_states[chat_id] = {"stage": "category"}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for cat in categories:
        markup.add(cat)
    markup.add("–°–∫–∞—Å—É–≤–∞—Ç–∏")
    bot.send_message(chat_id, "–©–æ —Å–∞–º–µ –∑–≤—ñ—Ç—É—î–º–æ?", reply_markup=markup)

# === –û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ ===
@bot.message_handler(func=lambda m: True)
def handle_all(message):
    chat_id = message.chat.id
    text = message.text
    state = user_states.get(chat_id, {"stage": "category"})

    if text == "–°–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.send_message(chat_id, "–ó–≤—ñ—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        user_states.pop(chat_id, None)
        return

    if text == "/–≥–æ—Ç–æ–≤–æ":
        result = "\n".join(user_reports.get(chat_id, []) or ["(–Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ)"])
        bot.send_message(chat_id, f"*–ì–æ—Ç–æ–≤–µ:*\n{result}", parse_mode="Markdown")
        user_states.pop(chat_id, None)
        return

    # === –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó ===
    if state["stage"] == "category":
        if text == "–ü–∏—Ä–æ–≥–∏":
            state["stage"] = "pies_sub"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–ó –º º—è—Å–æ–º", "–ë–µ–∑ –º º—è—Å–∞", "–°–æ–ª–æ–¥–∫—ñ")
            markup.add("‚Ü© –ù–∞–∑–∞–¥")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∏—Ä–æ–≥—ñ–≤:", reply_markup=markup)

        elif text == "–ü–∏—Ä—ñ–∂–∫–∏":
            state["stage"] = "pyrizhky_sub"
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add("–°–æ–ª–æ–Ω—ñ", "–°–æ–ª–æ–¥–∫—ñ")
            markup.add("‚Ü© –ù–∞–∑–∞–¥")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)

        elif text == "–ì–∞–ª–µ—Ç–∏":
            state["stage"] = "galety"
            send_product_buttons(chat_id, galety)

        elif text == "–î–µ—Å–µ—Ä—Ç–∏":
            state["stage"] = "deserty"
            send_product_buttons(chat_id, deserty)

    # === –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∏—Ä–æ–≥—ñ–≤ ===
    elif state["stage"] == "pies_sub":
        if text == "‚Ü© –ù–∞–∑–∞–¥":
            return start_report(message)
        if text in pies:
            state["stage"] = "pies_select"
            state["current_dict"] = pies[text]
            send_product_buttons(chat_id, pies[text])

    # === –ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∏—Ä—ñ–∂–∫—ñ–≤ ===
    elif state["stage"] == "pyrizhky_sub":
        if text == "‚Ü© –ù–∞–∑–∞–¥":
            return start_report(message)
        if text == "–°–æ–ª–æ–Ω—ñ":
            state["stage"] = "savory_pyrizhky"
            state["current_dict"] = savory_pyrizhky
            send_product_buttons(chat_id, savory_pyrizhky)
        elif text == "–°–æ–ª–æ–¥–∫—ñ":
            state["stage"] = "sweet_pyrizhky"
            state["current_dict"] = sweet_pyrizhky
            send_product_buttons(chat_id, sweet_pyrizhky)

    # === –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∏—Ä–æ–±—É ===
    elif "current_dict" in state and text in state["current_dict"]:
        state["waiting_for_count"] = text
        bot.send_message(chat_id, f"–°–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑ {text}?")

    # === –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ ===
    elif "waiting_for_count" in state:
        emoji = state["waiting_for_count"]
        name = state["current_dict"][emoji]
        user_reports[chat_id].append(f"{emoji} {name} ‚Äî {text} —à—Ç.")
        state.pop("waiting_for_count")
        send_product_buttons(chat_id, state["current_dict"])

# === –ö–ù–û–ü–ö–ò –ó –¢–û–í–ê–†–ê–ú–ò ===
def send_product_buttons(chat_id, data):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keys = list(data.keys())
    for i in range(0, len(keys), 2):
        row = keys[i:i + 2]
        markup.add(*row)
    markup.add("/–≥–æ—Ç–æ–≤–æ")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –≤–∏—Ä—ñ–±:", reply_markup=markup)

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
bot.infinity_polling()
