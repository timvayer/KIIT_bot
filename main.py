import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–∏—Ä–æ–≥—ñ–≤
pies_categories = {
    "–ó –º º—è—Å–æ–º": {
        "üçóüçÖüßÄ": "–ö—É—Ä–∫–∞-—Ç–æ–º–∞—Ç–∏-—Å–∏—Ä",
        "üçóüçÑüßÄ": "–ö—É—Ä–∫–∞-–≥—Ä–∏–±–∏-—Å–∏—Ä",
        "ü¶Éü´ë": "–Ü–Ω–¥–∏–∫-—Å–æ–ª–æ–¥–∫–∏–π –ø–µ—Ä–µ—Ü—å",
        "üêÑüßÄ": "–¢–µ–ª—è—Ç–∏–Ω–∞-—Å–∏—Ä",
        "üçóüççüßÄ": "–ö—É—Ä–∫–∞-–∞–Ω–∞–Ω–∞—Å-—Å–∏—Ä",
    },
    "–ë–µ–∑ –º º—è—Å–∞": {
        "üßÖ": "–¶–∏–±—É–ª–µ–≤–∏–π",
        "üßÄüçÉ": "–°–∏—Ä-—à–ø–∏–Ω–∞—Ç",
        "üçÑüßÄ": "–ì—Ä–∏–±–∏-—Å–∏—Ä",
        "üßÄ": "–°—ñ–º —Å–∏—Ä—ñ–≤",
    },
    "–°–æ–ª–æ–¥–∫—ñ": {
        "üçíü´ê": "–í–∏—à–Ω—è-–ª–æ—Ö–∏–Ω–∞",
        "üçíüßÄ": "–í–∏—à–Ω—è-—Å–∏—Ä",
    }
}

# –ó–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_reports = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('/–∑–≤—ñ—Ç'), types.KeyboardButton('/–≥–æ—Ç–æ–≤–æ'))
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /–∑–≤—ñ—Ç, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–≤—ñ—Ç.", reply_markup=markup)

@bot.message_handler(commands=['–∑–≤—ñ—Ç'])
def start_report(message):
    chat_id = message.chat.id
    user_reports[chat_id] = []
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("ü•ß –ü–∏—Ä–æ–≥–∏", callback_data="–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:–ü–∏—Ä–æ–≥–∏"))
    markup.add(types.InlineKeyboardButton("ü•ü –ü–∏—Ä—ñ–∂–∫–∏", callback_data="–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:–ü–∏—Ä—ñ–∂–∫–∏"))
    markup.add(types.InlineKeyboardButton("ü•ß –ì–∞–ª–µ—Ç–∏", callback_data="–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:–ì–∞–ª–µ—Ç–∏"))
    markup.add(types.InlineKeyboardButton("üç∞ –î–µ—Å–µ—Ä—Ç–∏", callback_data="–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:–î–µ—Å–µ—Ä—Ç–∏"))
    markup.add(types.InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="—Å–∫–∞—Å—É–≤–∞—Ç–∏"))
    bot.send_message(chat_id, "–©–æ —Å–∞–º–µ –∑–≤—ñ—Ç—É—î–º–æ?", reply_markup=markup)

@bot.message_handler(commands=['–≥–æ—Ç–æ–≤–æ'])
def finish_report(message):
    chat_id = message.chat.id
    entries = user_reports.get(chat_id, [])
    if entries:
        text = "–ì–æ—Ç–æ–≤–µ:\n" + "\n".join(entries)
    else:
        text = "–ü–æ–∫–∏ —â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ."
    bot.send_message(chat_id, text)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    chat_id = call.message.chat.id

    if call.data == "–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:–ü–∏—Ä–æ–≥–∏":
        markup = types.InlineKeyboardMarkup()
        for subcat in pies_categories.keys():
            markup.add(types.InlineKeyboardButton(subcat, callback_data=f"–ø–∏—Ä–æ–≥–∏_–∫–∞—Ç:{subcat}"))
        markup.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="–ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è"))
        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–∏—Ä–æ–≥—ñ–≤:", chat_id, call.message.message_id, reply_markup=markup)

    elif call.data.startswith("–ø–∏—Ä–æ–≥–∏_–∫–∞—Ç:"):
        subcat = call.data.split(":")[1]
        markup = types.InlineKeyboardMarkup(row_width=2)
        for emoji in pies_categories[subcat]:
            markup.add(types.InlineKeyboardButton(emoji, callback_data=f"–ø–∏—Ä—ñ–≥:{emoji}:{subcat}"))
        markup.add(types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π", callback_data="–∫–∞—Ç–µ–≥–æ—Ä—ñ—è:–ü–∏—Ä–æ–≥–∏"))
        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –≤–∏—Ä—ñ–±:", chat_id, call.message.message_id, reply_markup=markup)

    elif call.data.startswith("–ø–∏—Ä—ñ–≥:"):
        emoji, subcat = call.data.split(":")[1:]
        name = pies_categories[subcat][emoji]
        bot.send_message(chat_id, f"–°–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑ {emoji}?")
        bot.register_next_step_handler_by_chat_id(chat_id, lambda msg: save_quantity(msg, emoji, name))

    elif call.data == "–ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è":
        start_report(call.message)

    elif call.data == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        bot.edit_message_text("–ó–≤—ñ—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", chat_id, call.message.message_id)

def save_quantity(message, emoji, name):
    chat_id = message.chat.id
    qty = message.text.strip()
    if qty.isdigit():
        record = f"{emoji} {name} ‚Äî {qty} —à—Ç."
        user_reports[chat_id].append(record)
        bot.send_message(chat_id, f"–ó–∞–ø–∏—Å–∞–Ω–æ: {record}")
    else:
        bot.send_message(chat_id, "–¶–µ –Ω–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
