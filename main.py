import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

user_reports = {}
user_stage = {}
user_category = {}
user_subcategory = {}

# –î–∞–Ω—ñ
pies = {
    "–ü–∏—Ä—ñ–∂–∫–∏": {
        "–°–æ–ª–æ–Ω—ñ": {
            "ü•î": "–ö–∞—Ä—Ç–æ–ø–ª—è",
            "ü•îüçÑ": "–ö–∞—Ä—Ç–æ–ø–ª—è-–≥—Ä–∏–±–∏",
            "üçÑ": "–ì—Ä–∏–±–∏",
            "ü•¨": "–ö–∞–ø—É—Å—Ç–∞",
            "ü•¨ü•©": "–ö–∞–ø—É—Å—Ç–∞-–º º—è—Å–æ",
            "ü•©ü•ó": "–ú º—è—Å–æ-–æ–≤–æ—á—ñ"
        },
        "–°–æ–ª–æ–¥–∫—ñ": {
            "üçí": "–í–∏—à–Ω—è",
            "üçíüç´": "–í–∏—à–Ω—è-—à–æ–∫–æ–ª–∞–¥",
            "üçíüåº": "–í–∏—à–Ω—è-–º–∞–∫",
            "üçê": "–ì—Ä—É—à–∞",
            "–°–ª–∏–≤–∞": "–°–ª–∏–≤–∞",
            "–ê–±—Ä–∏–∫–æ—Å": "–ê–±—Ä–∏–∫–æ—Å",
            "–í–∏—à–Ω—è-–∫—Ä–µ–º": "–í–∏—à–Ω—è-–∫—Ä–µ–º",
            "–ú–∞–∫-–∫—Ä–µ–º": "–ú–∞–∫-–∫—Ä–µ–º",
            "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è": "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è"
        }
    },
    "–ü–∏—Ä–æ–≥–∏": {
        "–ó –º º—è—Å–æ–º": {
            "üçóüçÖüßÄ": "–ö—É—Ä–∫–∞-—Ç–æ–º–∞—Ç–∏-—Å–∏—Ä",
            "üçóüçÑüßÄ": "–ö—É—Ä–∫–∞-–≥—Ä–∏–±–∏-—Å–∏—Ä",
            "ü¶Éü´ë": "–Ü–Ω–¥–∏–∫-–ø–µ—Ä–µ—Ü—å",
        },
        "–ë–µ–∑ –º º—è—Å–∞": {
            "üßÖ": "–¶–∏–±—É–ª–µ–≤–∏–π",
            "üßÄüçÑ": "–°–∏—Ä-–≥—Ä–∏–±–∏",
            "üßÄü•¨": "–°–∏—Ä-—à–ø–∏–Ω–∞—Ç",
            "üßÄ": "–°—ñ–º —Å–∏—Ä—ñ–≤"
        },
        "–°–æ–ª–æ–¥–∫—ñ": {
            "üçíüîµ": "–í–∏—à–Ω—è-—á–æ—Ä–Ω–∏—Ü—è",
            "üçíüßÄ": "–í–∏—à–Ω—è-—Å–∏—Ä"
        }
    },
    "–ì–∞–ª–µ—Ç–∏": {
        "ü•ßüçè": "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è",
        "ü•ßüçÖ": "–¢–æ–º–∞—Ç–∏-—Å–∏—Ä"
    },
    "–î–µ—Å–µ—Ä—Ç–∏": {
        "üç∞": "–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω",
        "üçØ": "–ü–∞—Ö–ª–∞–≤–∞",
        "ü•ú": "–ì–æ—Ä—ñ—à–∫–∏"
    }
}

# –ö–æ–º–∞–Ω–¥–∞ /start –∞–±–æ /–∑–≤—ñ—Ç
@bot.message_handler(commands=["start", "–∑–≤—ñ—Ç"])
def start_report(message):
    chat_id = message.chat.id
    user_reports[chat_id] = []
    user_stage[chat_id] = "category"
    markup = types.InlineKeyboardMarkup()
    for cat in pies:
        markup.add(types.InlineKeyboardButton(f"{list(pies[cat].values())[0] if isinstance(pies[cat], dict) else ''} {cat}", callback_data=cat))
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id
    data = call.data

    if user_stage.get(chat_id) == "category":
        user_category[chat_id] = data
        if isinstance(pies[data], dict) and all(isinstance(v, dict) for v in pies[data].values()):
            user_stage[chat_id] = "subcategory"
            markup = types.InlineKeyboardMarkup()
            for subcat in pies[data]:
                markup.add(types.InlineKeyboardButton(subcat, callback_data=subcat))
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
        else:
            user_stage[chat_id] = "product"
            show_products(chat_id, pies[data])
    elif user_stage.get(chat_id) == "subcategory":
        user_subcategory[chat_id] = data
        user_stage[chat_id] = "product"
        category = user_category[chat_id]
        show_products(chat_id, pies[category][data])
    elif user_stage.get(chat_id) == "product":
        emoji = data
        category = user_category[chat_id]
        subcat = user_subcategory.get(chat_id)
        name = pies[category][subcat][emoji] if subcat else pies[category][emoji]
        user_stage[chat_id] = "quantity"
        user_reports[chat_id].append({"emoji": emoji, "name": name})
        bot.send_message(chat_id, f"–°–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑ {emoji}?")

# –í–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
@bot.message_handler(func=lambda message: message.text.isdigit())
def handle_quantity(message):
    chat_id = message.chat.id
    if user_stage.get(chat_id) == "quantity":
        qty = int(message.text)
        if user_reports.get(chat_id):
            user_reports[chat_id][-1]["qty"] = qty
            last = user_reports[chat_id][-1]
            bot.send_message(chat_id, f"–ó–∞–ø–∏—Å–∞–Ω–æ: {last['emoji']} {last['name']} ‚Äî {qty} —à—Ç.")
        user_stage[chat_id] = "product"
        # –ü–æ–≤—Ç–æ—Ä–Ω–µ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        category = user_category[chat_id]
        subcat = user_subcategory.get(chat_id)
        current_dict = pies[category][subcat] if subcat else pies[category]
        show_products(chat_id, current_dict)

# /–≥–æ—Ç–æ–≤–æ ‚Äî —Ñ—ñ–Ω–∞–ª
@bot.message_handler(commands=["–≥–æ—Ç–æ–≤–æ"])
def finish_report(message):
    chat_id = message.chat.id
    if chat_id in user_reports:
        text = "*–ì–æ—Ç–æ–≤–µ:*\n"
        for item in user_reports[chat_id]:
            text += f"{item['emoji']} {item['name']} ‚Äî {item['qty']} —à—Ç.\n"
        bot.send_message(chat_id, text, parse_mode="Markdown")
        del user_reports[chat_id]
        user_stage[chat_id] = None

# –î–æ–ø–æ–º—ñ–∂–Ω–∞
def show_products(chat_id, items_dict):
    markup = types.InlineKeyboardMarkup()
    row = []
    for i, emoji in enumerate(items_dict):
        btn = types.InlineKeyboardButton(emoji, callback_data=emoji)
        row.append(btn)
        if len(row) == 2:
            markup.add(*row)
            row = []
    if row:
        markup.add(*row)
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –≤–∏—Ä—ñ–±:", reply_markup=markup)

bot.polling()
