from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import os

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (Render –¥–æ–∑–≤–æ–ª—è—î –¥–æ–¥–∞—Ç–∏ BOT_TOKEN –æ–∫—Ä–µ–º–æ)
TOKEN = os.getenv("BOT_TOKEN")

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
menu = [
    ["‚òëÔ∏è –Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è", "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞"],
    ["üí∞ –ö–∞—Å–∞", "üìö –î–æ–≤—ñ–¥–∫–∞"],
    ["üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"]
]
markup = ReplyKeyboardMarkup(menu, resize_keyboard=True)

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –ö–Ü–Ü–¢. –û–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é:", reply_markup=markup)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –º–µ–Ω—é
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚òëÔ∏è –Ü–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è":
        await update.message.reply_text("–¢—É—Ç –±—É–¥–µ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—è.")
    elif text == "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∑–∫–∞":
        await update.message.reply_text("–¢—É—Ç –±—É–¥–µ –∑–∞–º–æ—Ä–æ–∑–∫–∞.")
    elif text == "üí∞ –ö–∞—Å–∞":
        await update.message.reply_text("–¢—É—Ç –±—É–¥–µ –∫–∞—Å–∞.")
    elif text == "üìö –î–æ–≤—ñ–¥–∫–∞":
        await update.message.reply_text("–¢—É—Ç –±—É–¥–µ –¥–æ–≤—ñ–¥–∫–∞.")
    elif text == "üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        await update.message.reply_text("–¢—É—Ç –±—É–¥–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞.")
    else:
        await update.message.reply_text("–ù–µ –≤–ø—ñ–∑–Ω–∞—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –û–±–µ—Ä–∏ –∑ –º–µ–Ω—é.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
