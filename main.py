
import telebot
from telebot import types
import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ø–∏—Å–æ–∫ –ø–∏—Ä—ñ–∂–∫—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—É –ø–æ–∫–∏ —â–æ)
savory_pyrizhky = {
    "ü•î": "–ö–∞—Ä—Ç–æ–ø–ª—è",
    "ü•îüçÑ": "–ö–∞—Ä—Ç–æ–ø–ª—è-–≥—Ä–∏–±–∏",
    "üçÑ": "–ì—Ä–∏–±–∏",
    "ü•¨": "–ö–∞–ø—É—Å—Ç–∞",
    "ü•¨ü•©": "–ö–∞–ø—É—Å—Ç–∞-–º º—è—Å–æ",
    "ü•©ü•ó": "–ú º—è—Å–æ-–æ–≤–æ—á—ñ"
}

sweet_pyrizhky = {
    "üçí": "–í–∏—à–Ω—è",
    "üçíüç´": "–í–∏—à–Ω—è-—à–æ–∫–æ–ª–∞–¥",
    "üçíüåº": "–í–∏—à–Ω—è-–º–∞–∫",
    "üçê": "–ì—Ä—É—à–∞",
    "–°–ª–∏–≤–∞": "–°–ª–∏–≤–∞",
    "–ê–±—Ä–∏–∫–æ—Å": "–ê–±—Ä–∏–∫–æ—Å",
    "–í–∏—à–Ω—è-–∫—Ä–µ–º": "–í–∏—à–Ω—è-–∫—Ä–µ–º",
    "–ú–∞–∫-–∫—Ä–µ–º": "–ú–∞–∫-–∫—Ä–µ–º",
    "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è": "–Ø–±–ª—É–∫–æ-–∫–æ—Ä–∏—Ü—è"
}

user_reports = {}

@bot.message_handler(commands=["start"])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("/–∑–≤—ñ—Ç"), types.KeyboardButton("/–≥–æ—Ç–æ–≤–æ"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –Ø –ö–Ü–Ü–¢-–±–æ—Ç, –≥–æ—Ç–æ–≤–∏–π –ø—Ä–∏–π–Ω—è—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü—ñ—é!", reply_markup=markup)

@bot.message_handler(commands=["–∑–≤—ñ—Ç"])
def start_report(message):
    chat_id = message.chat.id
    user_reports[chat_id] = []

    # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    text = "*–ü–∏—Ä—ñ–∂–∫–∏*

_–°–æ–ª–æ–Ω—ñ:_\n"
    for emoji, name in savory_pyrizhky.items():
        text += f"{emoji} ‚Äî {name}\n"

    text += "\n_–°–æ–ª–æ–¥–∫—ñ:_\n"
    for emoji, name in sweet_pyrizhky.items():
        text += f"{emoji} ‚Äî {name}\n"

    bot.send_message(chat_id, text, parse_mode="Markdown")

    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –ª–∏—à–µ –¥–ª—è –ø–∏—Ä—ñ–∂–∫—ñ–≤
    markup = types.InlineKeyboardMarkup(row_width=2)
    for emoji in list(savory_pyrizhky.keys()) + list(sweet_pyrizhky.keys()):
        markup.add(types.InlineKeyboardButton(emoji, callback_data=f"pyrizhok_{emoji}"))
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –ø–∏—Ä—ñ–∂–æ–∫:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("pyrizhok_"))
def ask_quantity(call):
    chat_id = call.message.chat.id
    emoji = call.data.split("_", 1)[1]
    name = savory_pyrizhky.get(emoji) or sweet_pyrizhky.get(emoji) or "–Ω–µ–≤—ñ–¥–æ–º–∏–π"
    msg = bot.send_message(chat_id, f"–°–∫—ñ–ª—å–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –ø–∏—Ä—ñ–∂–∫—ñ–≤ –∑ {emoji}?")
    bot.register_next_step_handler(msg, lambda m: save_quantity(m, emoji, name))

def save_quantity(message, emoji, name):
    chat_id = message.chat.id
    qty = message.text.strip()
    if chat_id not in user_reports:
        user_reports[chat_id] = []
    user_reports[chat_id].append(f"{emoji} {name} ‚Äî {qty} —à—Ç.")

    bot.send_message(chat_id, f"–ó–∞–ø–∏—Å–∞–Ω–æ: {emoji} {name} ‚Äî {qty} —à—Ç.")

@bot.message_handler(commands=["–≥–æ—Ç–æ–≤–æ"])
def finish_report(message):
    chat_id = message.chat.id
    data = user_reports.get(chat_id, [])
    if not data:
        bot.send_message(chat_id, "–ù—ñ—á–æ–≥–æ –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.")
        return

    final_text = "*–ì–æ—Ç–æ–≤–µ:*\n" + "\n".join(data)
    bot.send_message(chat_id, final_text, parse_mode="Markdown")

bot.polling()
